import random

# La población de genes (todos los números posibles) que proporcionaste.
GENE_POOL = [
    397.01, 398.32, 399.63, 400.93, 402.24, 403.55, 404.86, 406.17, 407.48, 408.79, 410.10, 411.41, 412.72, 414.03, 415.34, 416.65, 417.96, 419.27, 420.58, 421.90, 423.21, 424.52, 425.83,
    427.15, 428.46, 429.77, 431.09, 432.40, 433.71, 435.03, 436.34, 437.66, 438.97, 440.29, 441.60, 442.92, 444.23, 445.55, 446.87, 448.18, 449.50, 450.82, 452.13, 453.45, 454.77, 456.09, 457.40,
    458.72, 460.04, 461.36, 462.68, 464.00, 465.32, 466.64, 467.96, 469.28, 470.60, 471.92, 473.24, 474.56, 475.88, 477.20, 478.52, 479.85, 481.17, 482.49, 483.81, 485.14, 486.46, 487.78, 489.11,
    490.43, 491.75, 493.08, 494.40, 495.73, 497.05, 498.38, 499.70, 501.03, 502.35, 503.68, 505.01, 506.33, 507.66, 508.99, 510.31, 511.64, 512.97, 514.30, 515.63, 516.95, 518.28, 519.61, 520.94,
    522.27, 523.60, 524.93, 526.26, 527.59, 528.92, 530.25, 531.58, 532.91, 534.25, 535.58, 536.91, 538.24, 539.57, 540.91, 542.24, 543.57, 544.90, 546.24, 547.57, 548.91, 550.24, 551.57, 552.91,
    554.24, 555.58, 556.91, 558.25, 559.59, 560.92, 562.26, 563.59, 564.93, 566.27, 567.61, 568.94, 570.28, 571.62, 572.96, 574.30, 575.63, 576.97, 578.31, 579.65, 580.99, 582.33, 583.67, 585.01,
    586.35, 587.69, 589.03, 590.37, 591.71, 593.06, 594.40, 595.74, 597.08, 598.42, 599.77, 601.11, 602.45, 603.80, 605.14, 606.48, 607.83, 609.17, 610.52, 611.86, 613.21, 614.55, 615.90, 617.24,
    618.59, 619.94, 621.28, 622.63, 623.98, 625.32, 626.67, 628.02, 629.37, 630.71, 632.06, 633.41, 634.76, 636.11, 637.46, 638.81, 640.16, 641.51, 642.86, 644.21, 645.56, 646.91, 648.26, 649.61,
    650.96, 652.31, 653.67, 655.02, 656.37, 657.72, 659.08, 660.43, 661.78, 663.14, 664.49, 665.84, 667.20, 668.55, 669.91, 671.26, 672.62, 673.97, 675.33, 676.68, 678.04, 679.40, 680.75, 682.11,
    683.47, 684.82, 686.18, 687.54, 688.90, 690.25, 691.61, 692.97, 694.33, 695.69, 697.05, 698.41, 699.77, 701.13, 702.49, 703.85, 705.21, 706.57, 707.93, 709.29, 710.65, 712.02, 713.38, 714.74,
    716.10, 717.47, 718.83, 720.19, 721.56, 722.92, 724.28, 725.65, 727.01, 728.38, 729.74, 731.11, 732.47, 733.84, 735.20, 736.57, 737.93, 739.30, 740.67, 742.03, 743.40, 744.77, 746.14, 747.50,
    748.87, 750.24, 751.61, 752.98, 754.35, 755.72, 757.09, 758.46, 759.83, 761.20, 762.57, 763.94, 765.31, 766.68, 768.05, 769.42, 770.79, 772.17, 773.54, 774.91, 776.28, 777.66, 779.03, 780.40,
    781.78, 783.15, 784.52, 785.90, 787.27, 788.65, 790.02, 791.40, 792.77, 794.15, 795.52, 796.90, 798.28, 799.65, 801.03, 802.41, 803.78, 805.16, 806.54, 807.92, 809.30, 810.67, 812.05, 813.43,
    814.81, 816.19, 817.57, 818.95, 820.33, 821.71, 823.09, 824.47, 825.85, 827.23, 828.61, 830.00, 831.38, 832.76, 834.14, 835.53, 836.91, 838.29, 839.67, 841.06, 842.44, 843.83, 845.21, 846.59,
    847.98, 849.36, 850.75, 852.13, 853.52, 854.91, 856.29, 857.68, 859.06, 860.45, 861.84, 863.23, 864.61, 866.00, 867.39, 868.78, 870.16, 871.55, 872.94, 874.33, 875.72, 877.11, 878.50, 879.89,
    881.28, 882.67, 884.06, 885.45, 886.84, 888.23, 889.63, 891.02, 892.41, 893.80, 895.19, 896.59, 897.98, 899.37, 900.77, 902.16, 903.55, 904.95, 906.34, 907.74, 909.13, 910.53, 911.92, 913.32,
    914.71, 916.11, 917.50, 918.90, 920.30, 921.69, 923.09, 924.49, 925.89, 927.28, 928.68, 930.08, 931.48, 932.88, 934.28, 935.68, 937.08, 938.48, 939.88, 941.28, 942.68, 944.08, 945.48, 946.88,
    948.28, 949.68, 951.08, 952.48, 953.89, 955.29, 956.69, 958.09, 959.50, 960.90, 962.30, 963.71, 965.11, 966.52, 967.92, 969.33, 970.73, 972.14, 973.54, 974.95, 976.35, 977.76, 979.16, 980.57,
    981.98, 983.38, 984.79, 986.20, 987.61, 989.02, 990.42, 991.83, 993.24, 994.65, 996.06, 997.47, 998.88, 1000.29, 1001.70, 1003.11, 1004.52
]

# --- Parámetros del Algoritmo Genético ---
POPULATION_SIZE = 20  # Cuántos individuos hay en cada generación.
NUM_GENES = 3         # Cada individuo se compone de 3 números.
MUTATION_RATE = 0.1   # Probabilidad de que un gen mute (10%).
TOURNAMENT_SIZE = 5   # Número de individuos que compiten en la selección.
NUM_GENERATIONS = 50 # Número de ciclos que correrá el algoritmo.
ELITISM_COUNT = 1     # Número de mejores individuos que pasan directo a la siguiente generación.


def crear_individuo():
    """Crea un individuo seleccionando 3 genes únicos al azar del GENE_POOL."""
    return random.sample(GENE_POOL, NUM_GENES)

def crear_poblacion_inicial():
    """Crea la población inicial de un tamaño determinado."""
    return [crear_individuo() for _ in range(POPULATION_SIZE)]

def seleccion_por_torneo(poblacion_con_fitness):
    """Selecciona un padre usando el método de torneo."""
    torneo = random.sample(poblacion_con_fitness, TOURNAMENT_SIZE)
    # El ganador del torneo es el que tiene mayor fitness (el [1] en la tupla).
    ganador = max(torneo, key=lambda item: item[1])
    return ganador[0] # Devolvemos solo el individuo (los 3 números).

def cruce(padre1, padre2):
    """Realiza el cruce de un punto para crear dos hijos."""
    # Elige un punto de corte al azar.
    punto_corte = random.randint(1, NUM_GENES - 1)
    hijo1 = padre1[:punto_corte] + padre2[punto_corte:]
    hijo2 = padre2[:punto_corte] + padre1[punto_corte:]
    return hijo1, hijo2

def mutacion(individuo):
    """Aplica una mutación a un individuo con una probabilidad dada."""
    individuo_mutado = []
    for gen in individuo:
        if random.random() < MUTATION_RATE:
            # Reemplaza el gen por uno nuevo del GENE_POOL.
            # Nos aseguramos de que el nuevo gen no esté ya en el individuo.
            nuevos_genes_posibles = [g for g in GENE_POOL if g not in individuo]
            nuevo_gen = random.choice(nuevos_genes_posibles)
            individuo_mutado.append(nuevo_gen)
        else:
            individuo_mutado.append(gen)
    return individuo_mutado
